{"version":3,"sources":["Ticker.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Ticker","props","transformData","tickerData","state","datasets","label","data","map","item","x","moment","date","y","nav","fill","backgroundColor","borderColor","adjustedPrice","fetchTickersByPage","tickers","page","fetch","then","response","json","forEach","ticker","push","totalPages","currentPage","setState","this","tickerSymbol","className","options","scales","yAxes","scaleLabel","display","labelString","xAxes","type","time","format","unit","displayFormats","month","width","height","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAmBaA,EAAb,kDACI,WAAYC,GAAsB,IAAD,8BAC7B,cAAMA,IA6CFC,cAAgB,WAAO,IACnBC,EAAe,EAAKC,MAApBD,WACR,MAAO,CACHE,SAAU,CACN,CACIC,MAAO,mBACPC,KAAMJ,EAAWK,KAAI,SAAAC,GACjB,MAAO,CACHC,EAAGC,IAAOF,EAAKG,MACfC,EAAGJ,EAAKK,QAGhBC,MAAM,EACNC,gBAAiB,UACjBC,YAAa,WAEjB,CACIX,MAAO,iBACPC,KAAMJ,EAAWK,KAAI,SAAAC,GACjB,MAAO,CACHC,EAAGC,IAAOF,EAAKG,MACfC,EAAGJ,EAAKS,kBAGhBH,MAAM,EACNC,gBAAiB,oBACjBC,YAAa,8BAxEI,EA8EzBE,mBAAqB,SAACC,EAAwBC,GAElDC,MAAM,8DAAD,OAA+DD,EAA/D,aACAE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GACFA,EAAKa,QAAQM,SAAQ,SAACC,GAAD,OAAyBP,EAAQQ,KAAKD,MACvDpB,EAAKsB,aAAetB,EAAKuB,YACzB,EAAKC,SAAS,CACV5B,WAAYiB,IAGhB,EAAKD,mBAAmBC,EAASb,EAAKuB,YAAc,OAvFhE,EAAK1B,MAAQ,CACTD,WAAY,IAHa,EADrC,qDAQI,WAEI6B,KAAKb,mBAD0B,GACE,KAVzC,oBAaI,WAAiB,IACLc,EAAiBD,KAAK/B,MAAtBgC,aAuBR,OACI,qCACI,qBAAKC,UAAU,SAAf,SACI,oBAAIA,UAAU,QAAd,mBAA0BD,EAA1B,oBAEJ,cAAC,OAAD,CAAM1B,KAAMyB,KAAK9B,gBAAiBiC,QA3B1B,CACZC,OAAQ,CACJC,MAAO,CAAC,CACJC,WAAY,CACRC,SAAS,EACTC,YAAa,WAGrBC,MAAO,CAAC,CACJH,WAAY,CACRC,SAAS,EACTC,YAAa,QAEjBE,KAAM,OACNC,KAAM,CACFC,OAAQ,UACRC,KAAM,QACNC,eAAgB,CAAEC,MAAO,iBAUmBC,MAAO,IAAKC,OAAQ,aA1CxF,GAA4BC,aCNbC,MAVf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,CACED,aAAc,aCOPmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b9d0d31f.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\ninterface ITickerProps {\r\n    tickerSymbol: string;\r\n}\r\n\r\ninterface ITickerState {\r\n    tickerData: ITickerData[]\r\n}\r\n\r\ninterface ITickerData {\r\n    date: string;\r\n    nav: string;\r\n    KID: string;\r\n    adjustedPrice: number;\r\n}\r\n\r\nexport class Ticker extends Component<ITickerProps, ITickerState> {\r\n    constructor(props: ITickerProps) {\r\n        super(props);\r\n        this.state = {\r\n            tickerData: []\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const tickers: ITickerData[] = [];\r\n        this.fetchTickersByPage(tickers, 0);\r\n    }\r\n\r\n    public render() {\r\n        const { tickerSymbol } = this.props;\r\n        const options = {\r\n            scales: {\r\n                yAxes: [{\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Price'\r\n                    }\r\n                }],\r\n                xAxes: [{\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Date'\r\n                    },\r\n                    type: 'time',\r\n                    time: {\r\n                        format: 'MM YYYY',\r\n                        unit: 'month',\r\n                        displayFormats: { month: 'MMM YYYY' }\r\n                    }\r\n                }]\r\n            },\r\n        };\r\n        return (\r\n            <>\r\n                <div className='header'>\r\n                    <h1 className='title'>{`${tickerSymbol} Price Chart`}</h1>\r\n                </div>\r\n                <Line data={this.transformData()} options={options} width={800} height={400} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    private transformData = () => {\r\n        const { tickerData } = this.state;\r\n        return {\r\n            datasets: [\r\n                {\r\n                    label: 'Unadjusted Value',\r\n                    data: tickerData.map(item => {\r\n                        return {\r\n                            x: moment(item.date),\r\n                            y: item.nav\r\n                        };\r\n                    }),\r\n                    fill: false,\r\n                    backgroundColor: '#0492C2',\r\n                    borderColor: '#3fe1ff',\r\n                },\r\n                {\r\n                    label: 'Adjusted Value',\r\n                    data: tickerData.map(item => {\r\n                        return {\r\n                            x: moment(item.date),\r\n                            y: item.adjustedPrice\r\n                        };\r\n                    }),\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ]\r\n        };\r\n    }\r\n\r\n    private fetchTickersByPage = (tickers: ITickerData[], page: number) => {\r\n        // Objects are relatively small, lets grab 50 at a time. This number can be modified based on performance testing.\r\n        fetch(`/ticker/LALDX?startDate=2019-12-19&endDate=2021-01-31&page=${page}&size=50`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                data.tickers.forEach((ticker: ITickerData) => tickers.push(ticker));\r\n                if (data.totalPages === data.currentPage) {\r\n                    this.setState({\r\n                        tickerData: tickers\r\n                    });\r\n                } else {\r\n                    this.fetchTickersByPage(tickers, data.currentPage + 1);\r\n                }\r\n            });\r\n    };\r\n}","import './App.css';\nimport { Ticker } from './Ticker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ticker\n        tickerSymbol={'LALDX'}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}